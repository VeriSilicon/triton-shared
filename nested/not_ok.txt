** Replace : 'arith.constant'(0x55895f46eed0)
** Modified: 'scf.for'(0x55895f3e5d00)
** Erase   : 'arith.constant'(0x55895f46eed0)
** Replace : 'arith.constant'(0x55895f46efa0)
** Modified: 'scf.for'(0x55895f3e5d00)
** Erase   : 'arith.constant'(0x55895f46efa0)
** Replace : 'arith.constant'(0x55895f46f070)
** Modified: 'scf.for'(0x55895f3e5d00)
** Erase   : 'arith.constant'(0x55895f46f070)

//===-------------------------------------------===//
Processing operation : 'tt.func'(0x55895f46e2a0) {
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x55895f465950) {
  %1 = "arith.constant"() <{value = 1 : i32}> : () -> i32

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x55895f466320) {
  %2 = "arith.constant"() <{value = 2 : i32}> : () -> i32

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x55895f466870) {
  %3 = "arith.constant"() <{value = 0 : i32}> : () -> i32

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x55895f466dc0) {
  %4 = "arith.constant"() <{value = 32 : i32}> : () -> i32

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.make_range'(0x55895f467770) {
  %5 = "tt.make_range"() <{end = 2 : i32, start = 0 : i32}> : () -> tensor<2xi32>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.expand_dims'(0x55895f464140) {
  %6 = "tt.expand_dims"(%5) <{axis = 1 : i32}> : (tensor<2xi32>) -> tensor<2x1xi32>


  * Pattern  : 'tt.expand_dims -> ()' {
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.splat'(0x55895f467f70) {
  %7 = "tt.splat"(%arg4) : (i32) -> tensor<2x1xi32>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x55895f468040) {
  %8 = "arith.muli"(%6, %7) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x1xi32>, tensor<2x1xi32>) -> tensor<2x1xi32>


  * Pattern (anonymous namespace)::MulIMulIConstant : 'arith.muli -> (arith.constant, arith.muli)' {
    ** Match Failure : castedOp1 is not ::mlir::arith::MulIOp type
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.expand_dims'(0x55895f468ed0) {
  %9 = "tt.expand_dims"(%5) <{axis = 0 : i32}> : (tensor<2xi32>) -> tensor<1x2xi32>


  * Pattern  : 'tt.expand_dims -> ()' {
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.splat'(0x55895f469440) {
  %10 = "tt.splat"(%arg5) : (i32) -> tensor<1x2xi32>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x55895f469530) {
  %11 = "arith.muli"(%9, %10) <{overflowFlags = #arith.overflow<none>}> : (tensor<1x2xi32>, tensor<1x2xi32>) -> tensor<1x2xi32>


  * Pattern (anonymous namespace)::MulIMulIConstant : 'arith.muli -> (arith.constant, arith.muli)' {
    ** Match Failure : castedOp1 is not ::mlir::arith::MulIOp type
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.broadcast'(0x55895f469640) {
  %12 = "tt.broadcast"(%8) : (tensor<2x1xi32>) -> tensor<2x2xi32>


  * Pattern  : 'tt.broadcast -> ()' {
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.broadcast'(0x55895f469730) {
  %13 = "tt.broadcast"(%11) : (tensor<1x2xi32>) -> tensor<2x2xi32>


  * Pattern  : 'tt.broadcast -> ()' {
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x55895f469820) {
  %14 = "arith.addi"(%12, %13) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2xi32>


  * Pattern (anonymous namespace)::AddIAddConstant : 'arith.addi -> (arith.addi, arith.constant)' {
    ** Match Failure : castedOp1 is not ::mlir::arith::AddIOp type
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::AddISubConstantRHS : 'arith.addi -> (arith.addi, arith.constant)' {
    ** Match Failure : castedOp1 is not ::mlir::arith::SubIOp type
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::AddISubConstantLHS : 'arith.addi -> (arith.constant, arith.subi)' {
    ** Match Failure : castedOp1 is not ::mlir::arith::SubIOp type
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::AddIMulNegativeOneRhs : 'arith.addi -> (arith.subi)' {
    ** Match Failure : castedOp1 is not ::mlir::arith::MulIOp type
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::AddIMulNegativeOneLhs : 'arith.addi -> (arith.subi)' {
    ** Match Failure : castedOp1 is not ::mlir::arith::MulIOp type
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.splat'(0x55895f469db0) {
  %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<2x2x!tt.ptr<f32>>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.index_cast'(0x55895f469ea0) {
  %16 = "arith.index_cast"(%arg4) : (i32) -> index


  * Pattern (anonymous namespace)::IndexCastOfIndexCast : 'arith.index_cast -> ()' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::IndexCastOfExtSI : 'arith.index_cast -> (arith.index_cast)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.index_cast'(0x55895f469f90) {
  %17 = "arith.index_cast"(%arg5) : (i32) -> index


  * Pattern (anonymous namespace)::IndexCastOfIndexCast : 'arith.index_cast -> ()' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::IndexCastOfExtSI : 'arith.index_cast -> (arith.index_cast)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tts.make_tptr'(0x55895f449e10) {
  %18 = "tts.make_tptr"(%arg0, %16, %17) <{operandSegmentSizes = array<i32: 1, 2, 0, 0>, order = array<i32>, sizes = array<i64: 2, 2>, static_offsets = array<i64: 0, 0>, static_shape = array<i64: 0, 0>, static_strides = array<i64: -9223372036854775808, -9223372036854775808>}> : (!tt.ptr<f32>, index, index) -> tensor<2x2x!tt.ptr<f32>>

  ** Erase   : 'tts.make_tptr'(0x55895f449e10)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.index_cast'(0x55895f469f90) {
  %17 = "arith.index_cast"(%arg5) : (i32) -> index


  * Pattern (anonymous namespace)::IndexCastOfIndexCast : 'arith.index_cast -> ()' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::IndexCastOfExtSI : 'arith.index_cast -> (arith.index_cast)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.func'(0x55895f46e2a0) {
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.index_cast'(0x55895f469ea0) {
  %16 = "arith.index_cast"(%arg4) : (i32) -> index


  * Pattern (anonymous namespace)::IndexCastOfIndexCast : 'arith.index_cast -> ()' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::IndexCastOfExtSI : 'arith.index_cast -> (arith.index_cast)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.addptr'(0x55895f46ca60) {
  %18 = "tt.addptr"(%15, %14) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.splat'(0x55895f46cb70) {
  %19 = "tt.splat"(%arg6) : (i32) -> tensor<2x1xi32>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x55895f46cc60) {
  %20 = "arith.muli"(%19, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x1xi32>, tensor<2x1xi32>) -> tensor<2x1xi32>


  * Pattern (anonymous namespace)::MulIMulIConstant : 'arith.muli -> (arith.constant, arith.muli)' {
    ** Match Failure : castedOp1 is not ::mlir::arith::MulIOp type
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.splat'(0x55895f46d1f0) {
  %21 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1x!tt.ptr<f32>>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.index_cast'(0x55895f46d2e0) {
  %22 = "arith.index_cast"(%arg6) : (i32) -> index


  * Pattern (anonymous namespace)::IndexCastOfIndexCast : 'arith.index_cast -> ()' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::IndexCastOfExtSI : 'arith.index_cast -> (arith.index_cast)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tts.make_tptr'(0x55895f449cd0) {
  %23 = "tts.make_tptr"(%arg1, %22) <{operandSegmentSizes = array<i32: 1, 1, 0, 0>, order = array<i32>, sizes = array<i64: 2, 1>, static_offsets = array<i64: 0, 0>, static_shape = array<i64: 0, 0>, static_strides = array<i64: -9223372036854775808, 0>}> : (!tt.ptr<f32>, index) -> tensor<2x1x!tt.ptr<f32>>

  ** Erase   : 'tts.make_tptr'(0x55895f449cd0)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.addptr'(0x55895f46dd30) {
  %23 = "tt.addptr"(%21, %20) : (tensor<2x1x!tt.ptr<f32>>, tensor<2x1xi32>) -> tensor<2x1x!tt.ptr<f32>>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.splat'(0x55895f46de40) {
  %24 = "tt.splat"(%arg7) : (i32) -> tensor<1x2xi32>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x55895f46df30) {
  %25 = "arith.muli"(%24, %9) <{overflowFlags = #arith.overflow<none>}> : (tensor<1x2xi32>, tensor<1x2xi32>) -> tensor<1x2xi32>


  * Pattern (anonymous namespace)::MulIMulIConstant : 'arith.muli -> (arith.constant, arith.muli)' {
    ** Match Failure : castedOp1 is not ::mlir::arith::MulIOp type
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.broadcast'(0x55895f46e040) {
  %26 = "tt.broadcast"(%23) : (tensor<2x1x!tt.ptr<f32>>) -> tensor<2x2x!tt.ptr<f32>>


  * Pattern  : 'tt.broadcast -> ()' {
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.broadcast'(0x55895f46e130) {
  %27 = "tt.broadcast"(%25) : (tensor<1x2xi32>) -> tensor<2x2xi32>


  * Pattern  : 'tt.broadcast -> ()' {
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.index_cast'(0x55895f46e220) {
  %28 = "arith.index_cast"(%arg7) : (i32) -> index


  * Pattern (anonymous namespace)::IndexCastOfIndexCast : 'arith.index_cast -> ()' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::IndexCastOfExtSI : 'arith.index_cast -> (arith.index_cast)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tts.make_tptr'(0x55895f46e350) {
  %29 = "tts.make_tptr"(%arg1, %22, %28) <{operandSegmentSizes = array<i32: 1, 2, 0, 0>, order = array<i32>, sizes = array<i64: 2, 2>, static_offsets = array<i64: 0, 0>, static_shape = array<i64: 0, 0>, static_strides = array<i64: -9223372036854775808, -9223372036854775808>}> : (!tt.ptr<f32>, index, index) -> tensor<2x2x!tt.ptr<f32>>

  ** Erase   : 'tts.make_tptr'(0x55895f46e350)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.index_cast'(0x55895f46e220) {
  %28 = "arith.index_cast"(%arg7) : (i32) -> index


  * Pattern (anonymous namespace)::IndexCastOfIndexCast : 'arith.index_cast -> ()' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::IndexCastOfExtSI : 'arith.index_cast -> (arith.index_cast)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.func'(0x55895f46e2a0) {
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.index_cast'(0x55895f46d2e0) {
  %22 = "arith.index_cast"(%arg6) : (i32) -> index


  * Pattern (anonymous namespace)::IndexCastOfIndexCast : 'arith.index_cast -> ()' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::IndexCastOfExtSI : 'arith.index_cast -> (arith.index_cast)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.addptr'(0x55895f46e470) {
  %29 = "tt.addptr"(%26, %27) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x55895f46e580) {
  %30 = "arith.muli"(%arg5, %4) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32


  * Pattern (anonymous namespace)::MulIMulIConstant : 'arith.muli -> (arith.constant, arith.muli)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.index_cast'(0x55895f46e690) {
  %31 = "arith.index_cast"(%30) : (i32) -> index


  * Pattern (anonymous namespace)::IndexCastOfIndexCast : 'arith.index_cast -> ()' {
    ** Match Failure : castedOp1 is not ::mlir::arith::IndexCastOp type
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::IndexCastOfExtSI : 'arith.index_cast -> (arith.index_cast)' {
    ** Match Failure : castedOp1 is not ::mlir::arith::ExtSIOp type
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.index_cast'(0x55895f46e780) {
  %32 = "arith.index_cast"(%30) : (i32) -> index


  * Pattern (anonymous namespace)::IndexCastOfIndexCast : 'arith.index_cast -> ()' {
    ** Match Failure : castedOp1 is not ::mlir::arith::IndexCastOp type
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::IndexCastOfExtSI : 'arith.index_cast -> (arith.index_cast)' {
    ** Match Failure : castedOp1 is not ::mlir::arith::ExtSIOp type
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.splat'(0x55895f46e870) {
  %33 = "tt.splat"(%30) : (i32) -> tensor<2x2xi32>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x55895f46ee00) {
  %0 = "arith.constant"() <{value = 0 : index}> : () -> index

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'scf.for'(0x55895f3e5d00) {

  * Pattern (anonymous namespace)::ForOpIterArgsFolder : 'scf.for -> ()' {
    ** Insert  : 'scf.for'(0x55895f3cf390)
    ** Modified: 'tt.addptr'(0x55895f472ad0)
    ** Modified: 'arith.addi'(0x55895f472840)
    ** Modified: 'tts.make_tptr'(0x55895f471a80)
    ** Modified: 'scf.yield'(0x55895f4495a0)
    ** Modified: 'tts.make_tptr'(0x55895f472970)
    ** Modified: 'tts.make_tptr'(0x55895f471a80)
    ** Modified: 'scf.yield'(0x55895f4495a0)
    ** Modified: 'tts.make_tptr'(0x55895f472970)
    ** Modified: 'tts.make_tptr'(0x55895f471a80)
    ** Modified: 'scf.yield'(0x55895f4495a0)
    ** Modified: 'tts.make_tptr'(0x55895f472970)
    ** Modified: 'tts.make_tptr'(0x55895f471a80)
    ** Modified: 'tt.addptr'(0x55895f472e90)
    ** Modified: 'arith.addi'(0x55895f472be0)
    ** Modified: 'tts.make_tptr'(0x55895f4718e0)
    ** Modified: 'scf.yield'(0x55895f4495a0)
    ** Modified: 'tts.make_tptr'(0x55895f472d30)
    ** Modified: 'tts.make_tptr'(0x55895f4718e0)
    ** Modified: 'scf.yield'(0x55895f4495a0)
    ** Modified: 'tts.make_tptr'(0x55895f472d30)
    ** Modified: 'tts.make_tptr'(0x55895f4718e0)
    ** Modified: 'scf.yield'(0x55895f4495a0)
    ** Modified: 'tts.make_tptr'(0x55895f472d30)
    ** Modified: 'tts.make_tptr'(0x55895f4718e0)
    ** Insert  : 'tts.make_tptr'(0x55895f4718e0)
    ** Insert  : 'tts.make_tptr'(0x55895f471a80)
    ** Insert  : 'tts.load'(0x55895f4726c0)
    ** Insert  : 'tts.store'(0x55895f472790)
    ** Insert  : 'arith.addi'(0x55895f472840)
    ** Insert  : 'tts.make_tptr'(0x55895f472970)
    ** Insert  : 'tt.addptr'(0x55895f472ad0)
    ** Insert  : 'arith.addi'(0x55895f472be0)
    ** Insert  : 'tts.make_tptr'(0x55895f472d30)
    ** Insert  : 'tt.addptr'(0x55895f472e90)
    ** Insert  : 'scf.yield'(0x55895f4495a0)
    ** Insert  : 'scf.yield'(0x55895f4710e0)
    ** Erase   : 'scf.yield'(0x55895f4495a0)
    ** Replace : 'scf.for'(0x55895f3e5d00)
    ** Erase   : 'scf.for'(0x55895f3e5d00)
  } -> success : pattern applied successfully
} -> success : pattern matched
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.addptr'(0x55895f46e470) {
  %29 = "tt.addptr"(%26, %27) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.addptr'(0x55895f46ca60) {
  %18 = "tt.addptr"(%15, %14) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x55895f465950) {
  %1 = "arith.constant"() <{value = 1 : i32}> : () -> i32

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x55895f466320) {
  %2 = "arith.constant"() <{value = 2 : i32}> : () -> i32

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x55895f466870) {
  %3 = "arith.constant"() <{value = 0 : i32}> : () -> i32

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'scf.yield'(0x55895f4710e0) {
  "scf.yield"(%40, %38, %43, %41) : (tensor<2x2x!tt.ptr<f32>>, index, tensor<2x2x!tt.ptr<f32>>, index) -> ()

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.func'(0x55895f46e2a0) {
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'scf.for'(0x55895f3cf390) {

  * Pattern (anonymous namespace)::ForOpIterArgsFolder : 'scf.for -> ()' {
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::SimplifyTrivialLoops : 'scf.for -> ()' {
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::ForOpTensorCastFolder : 'scf.for -> ()' {
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tts.make_tptr'(0x55895f4718e0) {
  %35 = "tts.make_tptr"(%arg1, %22, %28, %arg12, %0) <{operandSegmentSizes = array<i32: 1, 2, 2, 0>, order = array<i32>, sizes = array<i64: 2, 2>, static_offsets = array<i64: -9223372036854775808, -9223372036854775808>, static_shape = array<i64: 0, 0>, static_strides = array<i64: -9223372036854775808, -9223372036854775808>}> : (!tt.ptr<f32>, index, index, index, index) -> tensor<2x2x!tt.ptr<f32>>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tts.make_tptr'(0x55895f471a80) {
  %36 = "tts.make_tptr"(%arg0, %16, %17, %arg10, %0) <{operandSegmentSizes = array<i32: 1, 2, 2, 0>, order = array<i32>, sizes = array<i64: 2, 2>, static_offsets = array<i64: -9223372036854775808, -9223372036854775808>, static_shape = array<i64: 0, 0>, static_strides = array<i64: -9223372036854775808, -9223372036854775808>}> : (!tt.ptr<f32>, index, index, index, index) -> tensor<2x2x!tt.ptr<f32>>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tts.load'(0x55895f4726c0) {
  %37 = "tts.load"(%36) <{operandSegmentSizes = array<i32: 1, 0, 0>, static_mask_dims = array<i64>}> : (tensor<2x2x!tt.ptr<f32>>) -> tensor<2x2xf32>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tts.store'(0x55895f472790) {
  "tts.store"(%35, %37) <{static_mask_dims = array<i64>}> : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xf32>) -> ()

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x55895f472840) {
  %38 = "arith.addi"(%arg10, %32) <{overflowFlags = #arith.overflow<none>}> : (index, index) -> index


  * Pattern (anonymous namespace)::AddIAddConstant : 'arith.addi -> (arith.addi, arith.constant)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::AddISubConstantRHS : 'arith.addi -> (arith.addi, arith.constant)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::AddISubConstantLHS : 'arith.addi -> (arith.constant, arith.subi)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::AddIMulNegativeOneRhs : 'arith.addi -> (arith.subi)' {
    ** Match Failure : castedOp1 is not ::mlir::arith::MulIOp type
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::AddIMulNegativeOneLhs : 'arith.addi -> (arith.subi)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tts.make_tptr'(0x55895f472970) {
  %39 = "tts.make_tptr"(%arg0, %16, %17, %38, %0) <{operandSegmentSizes = array<i32: 1, 2, 2, 0>, order = array<i32>, sizes = array<i64: 2, 2>, static_offsets = array<i64: -9223372036854775808, -9223372036854775808>, static_shape = array<i64: 0, 0>, static_strides = array<i64: -9223372036854775808, -9223372036854775808>}> : (!tt.ptr<f32>, index, index, index, index) -> tensor<2x2x!tt.ptr<f32>>

  ** Erase   : 'tts.make_tptr'(0x55895f472970)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'scf.for'(0x55895f3cf390) {

  * Pattern (anonymous namespace)::ForOpIterArgsFolder : 'scf.for -> ()' {
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::SimplifyTrivialLoops : 'scf.for -> ()' {
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::ForOpTensorCastFolder : 'scf.for -> ()' {
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x55895f472840) {
  %38 = "arith.addi"(%arg10, %32) <{overflowFlags = #arith.overflow<none>}> : (index, index) -> index


  * Pattern (anonymous namespace)::AddIAddConstant : 'arith.addi -> (arith.addi, arith.constant)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::AddISubConstantRHS : 'arith.addi -> (arith.addi, arith.constant)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::AddISubConstantLHS : 'arith.addi -> (arith.constant, arith.subi)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::AddIMulNegativeOneRhs : 'arith.addi -> (arith.subi)' {
    ** Match Failure : castedOp1 is not ::mlir::arith::MulIOp type
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::AddIMulNegativeOneLhs : 'arith.addi -> (arith.subi)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.index_cast'(0x55895f469f90) {
  %17 = "arith.index_cast"(%arg5) : (i32) -> index


  * Pattern (anonymous namespace)::IndexCastOfIndexCast : 'arith.index_cast -> ()' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::IndexCastOfExtSI : 'arith.index_cast -> (arith.index_cast)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.func'(0x55895f46e2a0) {
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.index_cast'(0x55895f469ea0) {
  %16 = "arith.index_cast"(%arg4) : (i32) -> index


  * Pattern (anonymous namespace)::IndexCastOfIndexCast : 'arith.index_cast -> ()' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::IndexCastOfExtSI : 'arith.index_cast -> (arith.index_cast)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.addptr'(0x55895f472ad0) {
  %39 = "tt.addptr"(%arg9, %33) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x55895f472be0) {
  %40 = "arith.addi"(%arg12, %31) <{overflowFlags = #arith.overflow<none>}> : (index, index) -> index


  * Pattern (anonymous namespace)::AddIAddConstant : 'arith.addi -> (arith.addi, arith.constant)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::AddISubConstantRHS : 'arith.addi -> (arith.addi, arith.constant)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::AddISubConstantLHS : 'arith.addi -> (arith.constant, arith.subi)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::AddIMulNegativeOneRhs : 'arith.addi -> (arith.subi)' {
    ** Match Failure : castedOp1 is not ::mlir::arith::MulIOp type
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::AddIMulNegativeOneLhs : 'arith.addi -> (arith.subi)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tts.make_tptr'(0x55895f472d30) {
  %41 = "tts.make_tptr"(%arg1, %22, %28, %40, %0) <{operandSegmentSizes = array<i32: 1, 2, 2, 0>, order = array<i32>, sizes = array<i64: 2, 2>, static_offsets = array<i64: -9223372036854775808, -9223372036854775808>, static_shape = array<i64: 0, 0>, static_strides = array<i64: -9223372036854775808, -9223372036854775808>}> : (!tt.ptr<f32>, index, index, index, index) -> tensor<2x2x!tt.ptr<f32>>

  ** Erase   : 'tts.make_tptr'(0x55895f472d30)
} -> success : operation is trivially dead
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'scf.for'(0x55895f3cf390) {

  * Pattern (anonymous namespace)::ForOpIterArgsFolder : 'scf.for -> ()' {
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::SimplifyTrivialLoops : 'scf.for -> ()' {
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::ForOpTensorCastFolder : 'scf.for -> ()' {
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x55895f472be0) {
  %40 = "arith.addi"(%arg12, %31) <{overflowFlags = #arith.overflow<none>}> : (index, index) -> index


  * Pattern (anonymous namespace)::AddIAddConstant : 'arith.addi -> (arith.addi, arith.constant)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::AddISubConstantRHS : 'arith.addi -> (arith.addi, arith.constant)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::AddISubConstantLHS : 'arith.addi -> (arith.constant, arith.subi)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::AddIMulNegativeOneRhs : 'arith.addi -> (arith.subi)' {
    ** Match Failure : castedOp1 is not ::mlir::arith::MulIOp type
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::AddIMulNegativeOneLhs : 'arith.addi -> (arith.subi)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.index_cast'(0x55895f46e220) {
  %28 = "arith.index_cast"(%arg7) : (i32) -> index


  * Pattern (anonymous namespace)::IndexCastOfIndexCast : 'arith.index_cast -> ()' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::IndexCastOfExtSI : 'arith.index_cast -> (arith.index_cast)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.func'(0x55895f46e2a0) {
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.index_cast'(0x55895f46d2e0) {
  %22 = "arith.index_cast"(%arg6) : (i32) -> index


  * Pattern (anonymous namespace)::IndexCastOfIndexCast : 'arith.index_cast -> ()' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::IndexCastOfExtSI : 'arith.index_cast -> (arith.index_cast)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.addptr'(0x55895f472e90) {
  %41 = "tt.addptr"(%arg11, %33) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.return'(0x55895f4678e0) {
  "tt.return"() : () -> ()

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.func'(0x55895f46e2a0) {
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x55895f46ee00) {
  %0 = "arith.constant"() <{value = 0 : index}> : () -> index

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x55895f465950) {
  %1 = "arith.constant"() <{value = 1 : i32}> : () -> i32

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x55895f466320) {
  %2 = "arith.constant"() <{value = 2 : i32}> : () -> i32

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x55895f466870) {
  %3 = "arith.constant"() <{value = 0 : i32}> : () -> i32

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.constant'(0x55895f466dc0) {
  %4 = "arith.constant"() <{value = 32 : i32}> : () -> i32

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.make_range'(0x55895f467770) {
  %5 = "tt.make_range"() <{end = 2 : i32, start = 0 : i32}> : () -> tensor<2xi32>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.expand_dims'(0x55895f464140) {
  %6 = "tt.expand_dims"(%5) <{axis = 1 : i32}> : (tensor<2xi32>) -> tensor<2x1xi32>


  * Pattern  : 'tt.expand_dims -> ()' {
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.splat'(0x55895f467f70) {
  %7 = "tt.splat"(%arg4) : (i32) -> tensor<2x1xi32>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x55895f468040) {
  %8 = "arith.muli"(%6, %7) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x1xi32>, tensor<2x1xi32>) -> tensor<2x1xi32>


  * Pattern (anonymous namespace)::MulIMulIConstant : 'arith.muli -> (arith.constant, arith.muli)' {
    ** Match Failure : castedOp1 is not ::mlir::arith::MulIOp type
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.expand_dims'(0x55895f468ed0) {
  %9 = "tt.expand_dims"(%5) <{axis = 0 : i32}> : (tensor<2xi32>) -> tensor<1x2xi32>


  * Pattern  : 'tt.expand_dims -> ()' {
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.splat'(0x55895f469440) {
  %10 = "tt.splat"(%arg5) : (i32) -> tensor<1x2xi32>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x55895f469530) {
  %11 = "arith.muli"(%9, %10) <{overflowFlags = #arith.overflow<none>}> : (tensor<1x2xi32>, tensor<1x2xi32>) -> tensor<1x2xi32>


  * Pattern (anonymous namespace)::MulIMulIConstant : 'arith.muli -> (arith.constant, arith.muli)' {
    ** Match Failure : castedOp1 is not ::mlir::arith::MulIOp type
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.broadcast'(0x55895f469640) {
  %12 = "tt.broadcast"(%8) : (tensor<2x1xi32>) -> tensor<2x2xi32>


  * Pattern  : 'tt.broadcast -> ()' {
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.broadcast'(0x55895f469730) {
  %13 = "tt.broadcast"(%11) : (tensor<1x2xi32>) -> tensor<2x2xi32>


  * Pattern  : 'tt.broadcast -> ()' {
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x55895f469820) {
  %14 = "arith.addi"(%12, %13) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x2xi32>, tensor<2x2xi32>) -> tensor<2x2xi32>


  * Pattern (anonymous namespace)::AddIAddConstant : 'arith.addi -> (arith.addi, arith.constant)' {
    ** Match Failure : castedOp1 is not ::mlir::arith::AddIOp type
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::AddISubConstantRHS : 'arith.addi -> (arith.addi, arith.constant)' {
    ** Match Failure : castedOp1 is not ::mlir::arith::SubIOp type
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::AddISubConstantLHS : 'arith.addi -> (arith.constant, arith.subi)' {
    ** Match Failure : castedOp1 is not ::mlir::arith::SubIOp type
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::AddIMulNegativeOneRhs : 'arith.addi -> (arith.subi)' {
    ** Match Failure : castedOp1 is not ::mlir::arith::MulIOp type
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::AddIMulNegativeOneLhs : 'arith.addi -> (arith.subi)' {
    ** Match Failure : castedOp1 is not ::mlir::arith::MulIOp type
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.splat'(0x55895f469db0) {
  %15 = "tt.splat"(%arg0) : (!tt.ptr<f32>) -> tensor<2x2x!tt.ptr<f32>>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.index_cast'(0x55895f469ea0) {
  %16 = "arith.index_cast"(%arg4) : (i32) -> index


  * Pattern (anonymous namespace)::IndexCastOfIndexCast : 'arith.index_cast -> ()' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::IndexCastOfExtSI : 'arith.index_cast -> (arith.index_cast)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.index_cast'(0x55895f469f90) {
  %17 = "arith.index_cast"(%arg5) : (i32) -> index


  * Pattern (anonymous namespace)::IndexCastOfIndexCast : 'arith.index_cast -> ()' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::IndexCastOfExtSI : 'arith.index_cast -> (arith.index_cast)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.addptr'(0x55895f46ca60) {
  %18 = "tt.addptr"(%15, %14) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.splat'(0x55895f46cb70) {
  %19 = "tt.splat"(%arg6) : (i32) -> tensor<2x1xi32>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x55895f46cc60) {
  %20 = "arith.muli"(%19, %6) <{overflowFlags = #arith.overflow<none>}> : (tensor<2x1xi32>, tensor<2x1xi32>) -> tensor<2x1xi32>


  * Pattern (anonymous namespace)::MulIMulIConstant : 'arith.muli -> (arith.constant, arith.muli)' {
    ** Match Failure : castedOp1 is not ::mlir::arith::MulIOp type
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.splat'(0x55895f46d1f0) {
  %21 = "tt.splat"(%arg1) : (!tt.ptr<f32>) -> tensor<2x1x!tt.ptr<f32>>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.index_cast'(0x55895f46d2e0) {
  %22 = "arith.index_cast"(%arg6) : (i32) -> index


  * Pattern (anonymous namespace)::IndexCastOfIndexCast : 'arith.index_cast -> ()' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::IndexCastOfExtSI : 'arith.index_cast -> (arith.index_cast)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.addptr'(0x55895f46dd30) {
  %23 = "tt.addptr"(%21, %20) : (tensor<2x1x!tt.ptr<f32>>, tensor<2x1xi32>) -> tensor<2x1x!tt.ptr<f32>>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.splat'(0x55895f46de40) {
  %24 = "tt.splat"(%arg7) : (i32) -> tensor<1x2xi32>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x55895f46df30) {
  %25 = "arith.muli"(%24, %9) <{overflowFlags = #arith.overflow<none>}> : (tensor<1x2xi32>, tensor<1x2xi32>) -> tensor<1x2xi32>


  * Pattern (anonymous namespace)::MulIMulIConstant : 'arith.muli -> (arith.constant, arith.muli)' {
    ** Match Failure : castedOp1 is not ::mlir::arith::MulIOp type
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.broadcast'(0x55895f46e040) {
  %26 = "tt.broadcast"(%23) : (tensor<2x1x!tt.ptr<f32>>) -> tensor<2x2x!tt.ptr<f32>>


  * Pattern  : 'tt.broadcast -> ()' {
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.broadcast'(0x55895f46e130) {
  %27 = "tt.broadcast"(%25) : (tensor<1x2xi32>) -> tensor<2x2xi32>


  * Pattern  : 'tt.broadcast -> ()' {
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.index_cast'(0x55895f46e220) {
  %28 = "arith.index_cast"(%arg7) : (i32) -> index


  * Pattern (anonymous namespace)::IndexCastOfIndexCast : 'arith.index_cast -> ()' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::IndexCastOfExtSI : 'arith.index_cast -> (arith.index_cast)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.addptr'(0x55895f46e470) {
  %29 = "tt.addptr"(%26, %27) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.muli'(0x55895f46e580) {
  %30 = "arith.muli"(%arg5, %4) <{overflowFlags = #arith.overflow<none>}> : (i32, i32) -> i32


  * Pattern (anonymous namespace)::MulIMulIConstant : 'arith.muli -> (arith.constant, arith.muli)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.index_cast'(0x55895f46e690) {
  %31 = "arith.index_cast"(%30) : (i32) -> index


  * Pattern (anonymous namespace)::IndexCastOfIndexCast : 'arith.index_cast -> ()' {
    ** Match Failure : castedOp1 is not ::mlir::arith::IndexCastOp type
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::IndexCastOfExtSI : 'arith.index_cast -> (arith.index_cast)' {
    ** Match Failure : castedOp1 is not ::mlir::arith::ExtSIOp type
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.index_cast'(0x55895f46e780) {
  %32 = "arith.index_cast"(%30) : (i32) -> index


  * Pattern (anonymous namespace)::IndexCastOfIndexCast : 'arith.index_cast -> ()' {
    ** Match Failure : castedOp1 is not ::mlir::arith::IndexCastOp type
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::IndexCastOfExtSI : 'arith.index_cast -> (arith.index_cast)' {
    ** Match Failure : castedOp1 is not ::mlir::arith::ExtSIOp type
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.splat'(0x55895f46e870) {
  %33 = "tt.splat"(%30) : (i32) -> tensor<2x2xi32>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'scf.for'(0x55895f3cf390) {

  * Pattern (anonymous namespace)::ForOpIterArgsFolder : 'scf.for -> ()' {
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::SimplifyTrivialLoops : 'scf.for -> ()' {
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::ForOpTensorCastFolder : 'scf.for -> ()' {
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tts.make_tptr'(0x55895f4718e0) {
  %35 = "tts.make_tptr"(%arg1, %22, %28, %arg12, %0) <{operandSegmentSizes = array<i32: 1, 2, 2, 0>, order = array<i32>, sizes = array<i64: 2, 2>, static_offsets = array<i64: -9223372036854775808, -9223372036854775808>, static_shape = array<i64: 0, 0>, static_strides = array<i64: -9223372036854775808, -9223372036854775808>}> : (!tt.ptr<f32>, index, index, index, index) -> tensor<2x2x!tt.ptr<f32>>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tts.make_tptr'(0x55895f471a80) {
  %36 = "tts.make_tptr"(%arg0, %16, %17, %arg10, %0) <{operandSegmentSizes = array<i32: 1, 2, 2, 0>, order = array<i32>, sizes = array<i64: 2, 2>, static_offsets = array<i64: -9223372036854775808, -9223372036854775808>, static_shape = array<i64: 0, 0>, static_strides = array<i64: -9223372036854775808, -9223372036854775808>}> : (!tt.ptr<f32>, index, index, index, index) -> tensor<2x2x!tt.ptr<f32>>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tts.load'(0x55895f4726c0) {
  %37 = "tts.load"(%36) <{operandSegmentSizes = array<i32: 1, 0, 0>, static_mask_dims = array<i64>}> : (tensor<2x2x!tt.ptr<f32>>) -> tensor<2x2xf32>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tts.store'(0x55895f472790) {
  "tts.store"(%35, %37) <{static_mask_dims = array<i64>}> : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xf32>) -> ()

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x55895f472840) {
  %38 = "arith.addi"(%arg10, %32) <{overflowFlags = #arith.overflow<none>}> : (index, index) -> index


  * Pattern (anonymous namespace)::AddIAddConstant : 'arith.addi -> (arith.addi, arith.constant)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::AddISubConstantRHS : 'arith.addi -> (arith.addi, arith.constant)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::AddISubConstantLHS : 'arith.addi -> (arith.constant, arith.subi)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::AddIMulNegativeOneRhs : 'arith.addi -> (arith.subi)' {
    ** Match Failure : castedOp1 is not ::mlir::arith::MulIOp type
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::AddIMulNegativeOneLhs : 'arith.addi -> (arith.subi)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.addptr'(0x55895f472ad0) {
  %39 = "tt.addptr"(%arg9, %33) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'arith.addi'(0x55895f472be0) {
  %40 = "arith.addi"(%arg12, %31) <{overflowFlags = #arith.overflow<none>}> : (index, index) -> index


  * Pattern (anonymous namespace)::AddIAddConstant : 'arith.addi -> (arith.addi, arith.constant)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::AddISubConstantRHS : 'arith.addi -> (arith.addi, arith.constant)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::AddISubConstantLHS : 'arith.addi -> (arith.constant, arith.subi)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::AddIMulNegativeOneRhs : 'arith.addi -> (arith.subi)' {
    ** Match Failure : castedOp1 is not ::mlir::arith::MulIOp type
  } -> failure : pattern failed to match

  * Pattern (anonymous namespace)::AddIMulNegativeOneLhs : 'arith.addi -> (arith.subi)' {
    ** Match Failure : There's no operation that defines operand 0 of castedOp0
  } -> failure : pattern failed to match
} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.addptr'(0x55895f472e90) {
  %41 = "tt.addptr"(%arg11, %33) : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>) -> tensor<2x2x!tt.ptr<f32>>

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'scf.yield'(0x55895f4710e0) {
  "scf.yield"(%39, %38, %41, %40) : (tensor<2x2x!tt.ptr<f32>>, index, tensor<2x2x!tt.ptr<f32>>, index) -> ()

} -> failure : pattern failed to match
//===-------------------------------------------===//

//===-------------------------------------------===//
Processing operation : 'tt.return'(0x55895f4678e0) {
  "tt.return"() : () -> ()

} -> failure : pattern failed to match
//===-------------------------------------------===//
module {
  tt.func public @nested1(%arg0: !tt.ptr<f32>, %arg1: !tt.ptr<f32>, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32, %arg6: i32, %arg7: i32) attributes {noinline = false} {
    %c0 = arith.constant 0 : index
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %c0_i32 = arith.constant 0 : i32
    %c32_i32 = arith.constant 32 : i32
    %0 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32>
    %1 = tt.expand_dims %0 {axis = 1 : i32} : tensor<2xi32> -> tensor<2x1xi32>
    %2 = tt.splat %arg4 : i32 -> tensor<2x1xi32>
    %3 = arith.muli %1, %2 : tensor<2x1xi32>
    %4 = tt.expand_dims %0 {axis = 0 : i32} : tensor<2xi32> -> tensor<1x2xi32>
    %5 = tt.splat %arg5 : i32 -> tensor<1x2xi32>
    %6 = arith.muli %4, %5 : tensor<1x2xi32>
    %7 = tt.broadcast %3 : tensor<2x1xi32> -> tensor<2x2xi32>
    %8 = tt.broadcast %6 : tensor<1x2xi32> -> tensor<2x2xi32>
    %9 = arith.addi %7, %8 : tensor<2x2xi32>
    %10 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<2x2x!tt.ptr<f32>>
    %11 = arith.index_cast %arg4 : i32 to index
    %12 = arith.index_cast %arg5 : i32 to index
    %13 = tt.addptr %10, %9 : tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>
    %14 = tt.splat %arg6 : i32 -> tensor<2x1xi32>
    %15 = arith.muli %14, %1 : tensor<2x1xi32>
    %16 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<2x1x!tt.ptr<f32>>
    %17 = arith.index_cast %arg6 : i32 to index
    %18 = tt.addptr %16, %15 : tensor<2x1x!tt.ptr<f32>>, tensor<2x1xi32>
    %19 = tt.splat %arg7 : i32 -> tensor<1x2xi32>
    %20 = arith.muli %19, %4 : tensor<1x2xi32>
    %21 = tt.broadcast %18 : tensor<2x1x!tt.ptr<f32>> -> tensor<2x2x!tt.ptr<f32>>
    %22 = tt.broadcast %20 : tensor<1x2xi32> -> tensor<2x2xi32>
    %23 = arith.index_cast %arg7 : i32 to index
    %24 = tt.addptr %21, %22 : tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>
    %25 = arith.muli %arg5, %c32_i32 : i32
    %26 = arith.index_cast %25 : i32 to index
    %27 = arith.index_cast %25 : i32 to index
    %28 = tt.splat %25 : i32 -> tensor<2x2xi32>
    %29:4 = scf.for %arg8 = %c0_i32 to %c2_i32 step %c1_i32 iter_args(%arg9 = %13, %arg10 = %c0, %arg11 = %24, %arg12 = %c0) -> (tensor<2x2x!tt.ptr<f32>>, index, tensor<2x2x!tt.ptr<f32>>, index)  : i32 {
      %30 = tts.make_tptr %arg1 to sizes: [2, 2], strides: [%17, %23], offsets: [%arg12, %c0], shape: [0, 0], order: [] : <f32> to tensor<2x2x!tt.ptr<f32>>
      %31 = tts.make_tptr %arg0 to sizes: [2, 2], strides: [%11, %12], offsets: [%arg10, %c0], shape: [0, 0], order: [] : <f32> to tensor<2x2x!tt.ptr<f32>>
      %32 = "tts.load"(%31) <{operandSegmentSizes = array<i32: 1, 0, 0>, static_mask_dims = array<i64>}> : (tensor<2x2x!tt.ptr<f32>>) -> tensor<2x2xf32>
      "tts.store"(%30, %32) <{static_mask_dims = array<i64>}> : (tensor<2x2x!tt.ptr<f32>>, tensor<2x2xf32>) -> ()
      %33 = arith.addi %arg10, %27 : index
      %34 = tt.addptr %arg9, %28 : tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>
      %35 = arith.addi %arg12, %26 : index
      %36 = tt.addptr %arg11, %28 : tensor<2x2x!tt.ptr<f32>>, tensor<2x2xi32>
      scf.yield %34, %33, %36, %35 : tensor<2x2x!tt.ptr<f32>>, index, tensor<2x2x!tt.ptr<f32>>, index
    }
    tt.return
  }
}

